#!/bin/bash

# Add all packages' /bin & /sbin into $PATH
for package_bin_dir in $(ls -d /var/vcap/packages/*/*bin)
do
  export PATH=${package_bin_dir}:$PATH
done

<% if_p("shield.agent.autoprovision") do |server| %>
<%#
  The SHIELD_API_TOKEN is set here so that the post-start script will fail to render
  when provisioning_key is not specified, but the script is about to try to create targets
  or jobs
%>
export SHIELD_API_TOKEN=<%= p("shield.provisioning_key") %>

<% if p("shield.skip_ssl_verify") %>
export SHIELD_SKIP_SSL_VERIFY=true
<% end %>

<%# Create a specific  config file for shield-agent stuff, to avoid race conditions
    in case we are colocated with shield-daemon. %>
shield -c /tmp/.shield_agent_config create backend default https://<%= p("shield.daemon.domain") %>:<%= p("shield.daemon.port") %>

<% my_ip = spec.networks.send(spec.networks.methods(false).first).ip %>

<%  targets = p("shield.targets", {}) %>
<% if_p("shield.target.name","shield.target.plugin","shield.target.config") do |name,plugin,config|
    targets[name] = {"plugin" => plugin, "config" => config}
end %>

<% if targets.any? %>
    <% targets.each do |name, target| %>
<%
  require 'json'
%>
cat <<EOF > /tmp/target-<%= name %>.json
{
  "name":     "<%= name %>",
  "plugin":   "<%= target["plugin"] %>",
  "endpoint": <%= target["config"].to_json.dump %>,
  "agent": "<%= my_ip %>:<%= p("shield.agent.port") %>"
}
EOF

TARGET=$(shield -c /tmp/.shield_agent_config --raw show target <%= name %> | jq -r '.uuid // empty')
if [[ -z ${TARGET} ]]; then
  echo "Creating target"
  cat /tmp/target-<%= name %>.json | shield -c /tmp/.shield_agent_config --raw create target
else
  echo "Editing target"
  cat /tmp/target-<%= name %>.json | shield -c /tmp/.shield_agent_config --raw edit target <%= name %>
fi

  # End Target
  <% end %>

# End Targets
<% end %>

<%  jobs = p("shield.jobs", {}) %>
<% if_p("shield.job.name","shield.job.target", "shield.job.store","shield.job.retention", "shield.job.schedule") do |name,target,store,retention,schedule|
    jobs[name] = { "target" => target,
                   "store" => store,
                   "retention" => retention,
                   "schedule" => schedule }
end %>

<% if jobs.any? %>
    <% jobs.each do |name, job| %>
TARGET=$(shield -c /tmp/.shield_agent_config --raw show target <%= job["target"] %> | jq -r '.uuid // empty')
STORE=$(shield -c /tmp/.shield_agent_config --raw show store <%= job["store"] %> | jq -r '.uuid // empty')
RETENTION=$(shield -c /tmp/.shield_agent_config --raw show retention policy <%= job["retention"] %> | jq -r '.uuid // empty')
SCHEDULE=$(shield -c /tmp/.shield_agent_config --raw show schedule <%= job["schedule"] %> | jq -r '.uuid // empty')

cat <<EOF > /tmp/job-<%= name %>.json
{"name":      "<%= name %>",
 "target":    "${TARGET}",
 "store":     "${STORE}",
 "schedule":  "${SCHEDULE}",
 "retention": "${RETENTION}",
 "paused":    false
}
EOF

JOB=$(shield -c /tmp/.shield_agent_config --raw show job <%= name %>  | jq -r '.uuid // empty')
if [[ -z ${JOB} ]]; then
  echo "Creating job"
  cat /tmp/job-<%= name %>.json | shield -c /tmp/.shield_agent_config --raw create job
else
  echo "Editing job"
  cat /tmp/job-<%= name %>.json | shield -c /tmp/.shield_agent_config --raw edit job <%= name %>
fi

    # End Job
    <% end %>

# End Jobs
<% end %>

<% end %>
