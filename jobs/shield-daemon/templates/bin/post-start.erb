#!/bin/bash

# Add all packages' /bin & /sbin into $PATH
for package_bin_dir in $(ls -d /var/vcap/packages/*/*bin)
do
  export PATH=${package_bin_dir}:$PATH
done

<%# Create a specific  config file for shield-daemon stuff, to avoid race conditions
    in case we are colocated with shield-agent. %>
shield -c /tmp/.shield_daemon_config create backend default https://<%= p("shield.daemon.domain") %>:<%= p("shield.daemon.port") %>

<% if p("shield.skip_ssl_verify") %>
export SHIELD_SKIP_SSL_VERIFY=true
<% end %>


<%  schedules = p("shield.schedules", [])
if_p("shield.schedule") do |sch|
    schedules[sch["name"]] = {"when" => sch["when"]}
end            
%>


<% if schedules.any? %>
<%#
  The SHIELD_API_TOKEN is set here so that the post-start script will fail to render
  when provisioning_key is not specified, but the script is about to try to create schedules
%>
export SHIELD_API_TOKEN=<%= p("shield.provisioning_key") %>

    <% schedules.each do |name, value| %>
cat <<EOF > /tmp/schedule-"<%= name %>".json
{ 
 "name":    "<%= name %>",
 "when":    "<%= value["when"] %>"
}
EOF

SCHEDULE=$(shield -c /tmp/.shield_daemon_config --raw show schedule <%= name %> | jq -r '.uuid // empty')
if [[ -z ${SCHEDULE} ]]; then
  echo "Creating schedule"
  cat /tmp/schedule-<%= name %>.json | shield -c /tmp/.shield_daemon_config --raw create schedule
else
  echo "Editing schedule"
  cat /tmp/schedule-<%= name %>.json | shield -c /tmp/.shield_daemon_config --raw edit schedule "<%= name %>" 
fi

    # End of schedule
    <% end %>

# End of schedules
<% end %>

<%  retentions = p("shield.retentions", [])
if_p("shield.retention") do |ret|
    retentions[ret["name"]] = {"expires" => ret["expires"]}
end            
%>

<% if retentions.any? %>
<%#
  The SHIELD_API_TOKEN is set here so that the post-start script will fail to render
  when provisioning_key is not specified, but the script is about to try to create retention
  policies
%>
export SHIELD_API_TOKEN=<%= p("shield.provisioning_key") %>
    <% retentions.each do |name, value| %>
cat <<EOF > /tmp/retention-<%= name %>.json
{ 
 "name":    "<%= name %>",
 "expires":  <%= value["expires"].to_i %>
}
EOF

RETENTION=$(shield -c /tmp/.shield_daemon_config --raw show retention policy <%= name %> | jq -r '.uuid // empty')
if [[ -z ${RETENTION} ]]; then
  echo "Creating retention"
  cat /tmp/retention-<%= name %>.json | shield -c /tmp/.shield_daemon_config --raw create retention policy
else
  echo "Editing retention"
  cat /tmp/retention-<%= name %>.json | shield -c /tmp/.shield_daemon_config --raw edit retention policy "<%= name %>"
fi
    <% end %>
<% end %>

<%  stores = p("shield.stores", [])
if_p("shield.store") do |st|
    stores[st["name"]] = {"plugin" => st["plugin"], "config" => st["config"]}
end            
%>

<% if stores.any? %>
<%#
  The SHIELD_API_TOKEN is set here so that the post-start script will fail to render
  when provisioning_key is not specified, but the script is about to try to create storess
%>
export SHIELD_API_TOKEN=<%= p("shield.provisioning_key") %>
<%
  require 'json'
%>

    <% stores.each do |name, store| %>
<%
  require 'json'
%>
cat <<EOF > /tmp/store-<%= name %>.json
{ 
  "name":     "<%= name %>",
  "plugin":   "<%= store["plugin"] %>",
  "endpoint": <%= store["config"].to_json.dump %>
}
EOF


STORE=$(shield -c /tmp/.shield_daemon_config --raw show store <%= name %> | jq -r '.uuid // empty')
if [[ -z ${STORE} ]]; then
  echo "Creating store"
	cat /tmp/store-<%= name %>.json | shield -c /tmp/.shield_daemon_config --raw create store
else
  echo "Editing store"
	cat /tmp/store-<%= name %>.json | shield -c /tmp/.shield_daemon_config --raw edit store <%= name %> 
fi
    <% end %>
<% end %>
